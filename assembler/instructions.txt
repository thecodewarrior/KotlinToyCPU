; program counter register (pc) is read-only, and always points to the next instruction
; <<...>> is a placeholder, not syntax

label: <<data>>

mov 712, r0 ; move immediate value 712
mov :label, r0 ; move address of label
ldr r0, :label ; load data at label
ldr r0, [16] ; load data at address 16. Value must be word-aligned (a multiple of 4 bytes)
ldr r0, [r2] ; load data at the address `r2`
ldr r0, [pc, 8] ; load data at the address `pc + 8`
ldr r0, [pc, r2] ; load data at the address `pc + r2`


    cmp r0, 3 ; compare r0 and 3
    eq? jmp :label ; jump if equal
    mov 712, r0 ; stuff to be skipped
label:
    mov 3, r0

lt? ldr r0, [pc, r2] ; only execute if comparison resulted in a less than


subroutine convention:
- any registers beyond r0-3 must be pushed to the stack and restored by the subroutine
- r0-3 must be pushed and restored by the caller if they are important

- if fewer than four parameters are passed, they are passed in r0-3 (r0-3 may be modified by the subroutine)
- otherwise, parameters are pushed onto the stack in the order they are defined

- if fewer than four values are returned, they are returned in r0-3
- otherwise, return values are pushed onto the stack in the order they are defined
